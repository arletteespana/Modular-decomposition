import networkx as nx
import matplotlib.pyplot as plt

def OverLap(v, Y, G):
    Nv = set(G.neighbors(v))
    if Nv & set(Y) != set({}) and Nv - set(Y) != set({}) and set(Y)- Nv != set({}):
        return True
    else:
        return False

def OverLaping(Y,G):
    l = []
    for x in list(G.nodes):
        if OverLap(x, Y, G) == True:
            l.append(x)
        else:
            continue
    return l 

def larg(e):
    return len(e)

def ToSet(lst):
    r = set({})
    for y in lst:
        r.add(frozenset(y))
    return r

def ToList(set):
    l = []
    for y in set:
        l.append(list(y))
    return l

def Rep(lst,old,new1,new2):
    for i in range(len(lst)):
        if lst[i] == old:
            lst[i] = new1
    return lst + new2

#BEGIN algo 2

def ModularDecom(partition, graph):
    P = partition
    G = graph
    P.sort(reverse = True, key = larg)
    Z = P[0]
    Q = P
    K = [Z]
    L = [x for x in P if x != Z]
    while len(L) > 0 or len(K) > 0:
        
        if len(L) > 0:
            S = L[0]
            X = [S]
            L = ToList(ToSet(L) - ToSet(X))  
        else:
            X = [K[0]]
            s = X[0][0]
            S = [s]
            K = ToList(ToSet(K).difference(ToSet(X)))  
        for x in S:
            for Y in ToList(ToSet(Q) - ToSet(X)):
                if set(G.neighbors(x)) & set(Y) != set({}) and set(G.neighbors(x)) - set(Y) != set({}) and set(Y) - set(G.neighbors(x)) != set({}):
                    Y1 = set(Y) & set(G.neighbors(x))
                    Y2 = set(Y) - set(G.neighbors(x))
                    Q = ToList(ToSet(Rep(Q, Y, list(Y1), [list(Y2)])))
                    Yaux = [list(Y1),list(Y2)]
                    Yaux.sort(reverse = True, key = larg)
                    Ymin = frozenset(Yaux[1])
                    Ymax = frozenset(Yaux[0])
                    if Y in L:
                        L = ToList(ToSet(L) | ({Ymin} | {Ymax}) - {frozenset(Y)})
                    else:
                        L = ToList(ToSet(L) | {Ymin})
                        if Y in K:
                            K = ToList(ToSet(Rep(ToList(K), ToList({frozenset(Y)}), ToList({Ymax}), [])))
                        else:
                            K = ToList(ToSet(ToList(K) + ToList({Ymax})))
    return Q  

#END  algo 2

def DelV(list):
    if [] in list:
        list.remove([])
        return list
    else:
        return list

def Overlaps(part, graph):
    TO = []
    for k in range(len(part)):
        TO = TO + OverLaping(part[k], graph)
        return TO

def flatten(list_of_lists):
    if len(list_of_lists) == 0:
        return list_of_lists
    if isinstance(list_of_lists[0], list):
        return flatten(list_of_lists[0]) + flatten(list_of_lists[1:])
    return list_of_lists[:1] + flatten(list_of_lists[1:])

# BEGIN algo 4

def FactPerm(graph, vertex):
    FP = []
    Gp = graph
    v = vertex
    Pr = DelV(ToList([set(Gp.neighbors(v)), {v}, set(Gp.nodes) - set(Gp.neighbors(v)) - {v}]))
    
    O = Overlaps(Pr,Gp)
    
    MD = DelV(ModularDecom(ToList([set(Gp.neighbors(v)), {v}, set(Gp.nodes) - set(Gp.neighbors(v)) - {v}]), graph))
    
    if len(Gp.nodes) == len(Pr):
        return flatten(Pr)
    elif len(O) == 0:
        FP.append(Pr)
        return flatten(Pr)    
    else:    
   
    
        while len(O) > 0:
            x = O[0]
            Nx = set(Gp.neighbors(x))
            Ys = list(filter(lambda y: OverLap(x, y, Gp) == True, Pr))
            Y = Ys[0]
            
            if x in list(Gp.neighbors(v)) == True and Y == list(set(Gp.nodes) - set(Gp.neighbors(v)) - {v}) or x in list(set(Gp.nodes) - set(Gp.neighbors(v)) - {v}) == True and Y == list(Gp.neighbors(v)):
                Pr = Rep(Pr,Y, [list(set(Y) & set(Gp.neighbors(x)))], list(set(Y) & (set(Gp.nodes) - set(Gp.neighbors(x)) - {x})))
                
            else:
                Pr = Rep(Pr,Y, list(set(Y) & (set(Gp.nodes) - set(Gp.neighbors(x)) - {x})), [list(set(Y) & set(Gp.neighbors(x)))])
                
            for X in MD:
                
                if len(X) > 1:
                    PX = FactPerm(nx.subgraph(graph,X), X[-1])
                    FP.append(PX)
                     
                else:
                    FP.append(X)
            return flatten(FP)

# END algo 4


